MAIN


document.addEventListener('DOMContentLoaded', () => {
    const topics = [
        {
            title: "Cosmology",
            description: "The study of the universe's origin, structure, and evolution.",
            moreInfo: ["Cosmology investigates phenomena like the Big Bang, cosmic microwave background, and galaxy formation.",
                "It uses physics, astronomy, and mathematics to understand the universe at large scales.",
                "Observations from telescopes and satellites inform theoretical models of the cosmos."],
            img: "img/cosmology.jpg",
            bgImg: "img/cosm1.jpg",
            diagramType: "bigBang"
        },
        {
            title: "Evolution",
            description: "The study of how species change over time.",
            moreInfo: ["Evolution explains the diversity of life through natural selection and genetic drift.",
                "Species adapt to their environments over generations.",
                "Fossil records and DNA analysis provide strong evidence for evolution."],
            img: "img/evolution.jpg",
            bgImg: "img/evol1.jpg",
            diagramType: "evol"
        },
        {
            title: "Quantum Mechanics",
            description: "The branch of physics dealing with atomic and subatomic behavior.",
            moreInfo: ["Quantum Mechanics explores superposition, entanglement, and uncertainty principles.",
                "It challenges classical intuition and shows probabilities govern particle behavior.",
                "Applications include lasers, semiconductors, and quantum computing."],
            img: "img/quantum.jpg",
            bgImg: "img/qm1.jpg",
            diagramType: "superPozicija"
        },
        {
            title: "Chemistry",
            description: "The study of matter, its properties, and reactions.",
            moreInfo: ["Chemistry studies atoms, molecules, reactions, bonds, acids, bases, thermodynamics, and kinetics.",
                "It explains substances' composition and behavior.",
                "Chemistry impacts medicine, energy, environment, and materials."],
            img: "img/chemistry.jpg",
            bgImg: "img/chem1.jpg",
            diagramType: "elektron"
        },
        {
            title: "Mathematics",
            description: "The study of numbers, shapes, structures, and patterns.",
            moreInfo: ["Mathematics provides tools to model, analyze, and solve problems.",
                "It ranges from arithmetic to advanced fields like algebra and topology.",
                "Math underpins logic, algorithms, and many technological advances."],
            img: "img/mathematics.jpg",
            bgImg: "img/math1.jpg",
            diagramType: "pi"
        },
        {
            title: "Medicine",
            description: "The science and practice of diagnosing, treating, and preventing disease.",
            moreInfo: ["Medicine combines biology, chemistry, and technology to improve health.",
                "Covers specialties like surgery, pharmacology, and public health.",
                "Modern medicine uses research, trials, and innovations like vaccines."],
            img: "img/medicine.jpg",
            bgImg: "img/med1.jpg",
            diagramType: "srce"
        }
    ];

    const container = document.getElementById('glossary_container');
    const modal = document.getElementById('modal_container');

    topics.forEach(topic => {
        const card = document.createElement('div');
        card.className = 'glossary_card';

        const img = document.createElement('img');
        img.src = topic.img;
        img.alt = topic.title;
        card.appendChild(img);

        const h3 = document.createElement('h3');
        h3.textContent = topic.title;
        card.appendChild(h3);

        const p = document.createElement('p');
        p.textContent = topic.description;
        card.appendChild(p);

        card.addEventListener('click', () => {
            const paragraphs = topic.moreInfo.map(p => `<p>${p}</p>`).join('');
            modal.innerHTML = `
                <div class="modal_overlay"></div>
                <div class="modal_content" style="background-image: url('${topic.bgImg}');">
                    <span class="modal_close">&times;</span>
                    <div class="modal_text_overlay">
                        <h2>${topic.title}</h2>
                        ${paragraphs}
                    </div>
                    <canvas class="modal_diagram"></canvas>
                </div>
            `;
            modal.classList.add('show');

            modal.querySelector('.modal_close').addEventListener('click', () => modal.classList.remove('show'));
            modal.querySelector('.modal_overlay').addEventListener('click', () => modal.classList.remove('show'));

            const diagramPoints = [
                { x: 0.05, y: 0.8 }, { x: 0.25, y: 0.4 }, { x: 0.5, y: 0.6 }, { x: 0.75, y: 0.3 }, { x: 0.95, y: 0.5 }
            ];

            drawDiagram('.modal_diagram', topic.diagramType);
        });

        container.appendChild(card);
    });

    const navToggle = document.querySelector('.nav_toggle');
    const navList = document.querySelector('.nav_list');

    navToggle.addEventListener('click', () => {
        navList.classList.toggle('show');
    });
});



FORMA 



$(document).ready(function(){
  $('#scienceForma').submit(function(e){
    e.preventDefault();
    let valid = true;
    $('#bravo').text('');
    $('input, textarea').removeClass('error');
    $('.poruka').remove();

    // Regex
    const nameRegex = /^[A-Za-zÀ-ž\s]{2,30}$/; // kukice
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]{2,}$/;
    const unitRegex = /^\d+(\.\d+)?\s?(cm|m|kg|g|mm)?$/i;

    // Name
    const name = $('#name').val().trim();
    if(!nameRegex.test(name)) {
      $('#name').addClass('error');
      $('<div class="poruka">Please enter a valid name (letters and spaces only).</div>').insertAfter('#name');
      valid = false;
    }

    // Email
    const email = $('#email').val().trim();
    if(!emailRegex.test(email)) {
      $('#email').addClass('error');
      $('<div class="poruka">Please enter a valid email address.</div>').insertAfter('#email');
      valid = false;
    }

// Date
const date = $('#date').val();
const today = new Date().toISOString().split('T')[0]; // today's date in yyyy-mm-dd
if(!date || date > today) {
  $('#date').addClass('error');
  $('<div class="poruka">Please select a valid date (not in the future, unless your experiment is time travel :D).</div>').insertAfter('#date');
  valid = false;
}


    // Unit
    const value = $('#value').val().trim();
    if(!unitRegex.test(value) || parseFloat(value) < 0) {
      $('#value').addClass('error');
      $('<div class="poruka">Please enter a valid positive measurement (e.g., 23.5 cm).</div>').insertAfter('#value');
      valid = false;
    }

    if(valid){
      $('#bravo').text('Form submitted successfully!');
    } else {
      $('#bravo').text('Please fix the highlighted fields.');
    }
  });
});



DIAGRAM


function drawDiagram(canvasSelector, type) {
    const canvas = $(canvasSelector)[0];
    canvas.width = canvas.offsetWidth;
    canvas.height = canvas.offsetHeight;
    const ctx = canvas.getContext('2d');

    ctx.clearRect(0, 0, canvas.width, canvas.height);

    switch (type) {
        case "bigBang":
            let radius = 0;
            function bB() {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                ctx.beginPath();
                ctx.arc(canvas.width / 2, canvas.height / 2, radius, 0, 2 * Math.PI);
                ctx.strokeStyle = "#00ffff";
                ctx.lineWidth = 2;
                ctx.stroke();
                if (radius < Math.min(canvas.width, canvas.height) / 2) {
                    radius += 0.3;
                    requestAnimationFrame(bB);
                }
            }
            bB();
            break;

        case "evol":
            const branches = [
                [{ x: 0.5, y: 0.9 }, { x: 0.5, y: 0.6 }, { x: 0.3, y: 0.4 }],
                [{ x: 0.5, y: 0.6 }, { x: 0.7, y: 0.4 }]
            ];
            let progress = 0;
            function drawBranches() {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                ctx.strokeStyle = "#00ff00";
                ctx.lineWidth = 2;
                branches.forEach(branch => {
                    ctx.beginPath();
                    ctx.moveTo(branch[0].x * canvas.width, branch[0].y * canvas.height);
                    for (let i = 1; i <= Math.floor(progress) && i < branch.length; i++) {
                        ctx.lineTo(branch[i].x * canvas.width, branch[i].y * canvas.height);
                    }
                    if (progress < branch.length - 1) {
                        const curr = branch[Math.floor(progress)];
                        const next = branch[Math.floor(progress) + 1];
                        const fraction = progress - Math.floor(progress);
                        const x = curr.x * canvas.width + (next.x - curr.x) * fraction * canvas.width;
                        const y = curr.y * canvas.height + (next.y - curr.y) * fraction * canvas.height;
                        ctx.lineTo(x, y);
                    }
                    ctx.stroke();
                });
                if (progress < branches[0].length) {
                    progress += 0.02;
                    requestAnimationFrame(drawBranches);
                }
            }
            drawBranches();
            break;

        case "elektron":
            let ugao = 0;
            const centarX = canvas.width / 2; 
            const centarY = canvas.height / 2;
            const orbita = Math.min(canvas.width, canvas.height) / 4;
            function orbit() {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                // nukleus
                ctx.beginPath();
                ctx.arc(centarX, centarY, 10, 0, 2 * Math.PI);
                ctx.fillStyle = "red";
                ctx.fill();
                // elektron
                ctx.beginPath();
                const elektronX = centarX + orbita * Math.cos(ugao);
                const elektronY = centarY + orbita * Math.sin(ugao);
                ctx.arc(elektronX, elektronY, 6, 0, 2 * Math.PI);
                ctx.fillStyle = "blue";
                ctx.fill();
                ugao += 0.05;
                requestAnimationFrame(orbit);
            }
            orbit();
            break;

        case "superPozicija":
            const start = { x: 0.1, y: 0.8 };
            const mid1 = { x: 0.5, y: 0.3 };
            const mid2 = { x: 0.5, y: 0.3 };
            const end = { x: 0.9, y: 0.7 };
            let tSplit = 0;

            function superPozicija() {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                const factor = 0.3 * Math.sin(tSplit * 0.05); // controls divergence

                // prva
                ctx.beginPath();
                ctx.moveTo(start.x * canvas.width, start.y * canvas.height);
                ctx.lineTo(mid1.x * canvas.width - factor * canvas.width, mid1.y * canvas.height - factor * canvas.height);
                ctx.lineTo(end.x * canvas.width, end.y * canvas.height);
                ctx.strokeStyle = "#ff00ff";
                ctx.lineWidth = 2;
                ctx.stroke();

                // druga
                ctx.beginPath();
                ctx.moveTo(start.x * canvas.width, start.y * canvas.height);
                ctx.lineTo(mid2.x * canvas.width + factor * canvas.width, mid2.y * canvas.height - factor * canvas.height);
                ctx.lineTo(end.x * canvas.width, end.y * canvas.height);
                ctx.stroke();

                tSplit++;
                requestAnimationFrame(superPozicija);
            }

            superPozicija();
            break;

        case "pi":
            const text = "π = 3.14159265358979323846264338327950288419716939937510…";
            let i1 = 0;
            function writePi() {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                ctx.font = "24px Arial";
                ctx.fillStyle = "#ffff00";
                ctx.fillText(text.slice(0, i1), 10, canvas.height / 2);
                if (i1 < text.length) {
                    i1++;
                    setTimeout(writePi, 200);
                }
            }
            writePi();
            break;

        case "srce":
            let t = 0;
            const otkucaj = 0.01; // manji brojevi, brze kuca
            const baza = 3;        // baza
            const amplituda = 1.2;  // amp
            function srce() {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                const faktor = Math.pow(Math.sin(t * otkucaj * Math.PI), 2);
                const skala = baza + amplituda * faktor;

                ctx.beginPath();
                for (let a = 0; a < Math.PI * 2; a += 0.01) {
                    const x = skala * 16 * Math.pow(Math.sin(a), 3);
                    const y = -skala * (13 * Math.cos(a) - 5 * Math.cos(2 * a) - 2 * Math.cos(3 * a) - Math.cos(4 * a));
                    ctx.lineTo(canvas.width / 2 + x, canvas.height / 2 + y);
                }
                ctx.fillStyle = "red";
                ctx.fill();
                t++;
                requestAnimationFrame(srce);
            }
            srce();
            break;


    }
}
